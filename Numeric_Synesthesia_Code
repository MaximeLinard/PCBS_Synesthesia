import pygame
import numpy as np
pygame.init()

'''______________Experiment parameters______________'''

nb_of_trials = 10
nb_of_pannels_with_five = 8

max_response_time = 4000

'''______________Graphic Window______________'''

Width, Height = 1000, 800

screen_center_x = Width // 2
screen_center_y = Height // 2

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (127, 127, 127)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

screen = pygame.display.set_mode((Width, Height))

pygame.display.set_caption('Numeric Synesthesia')

'''______________Instructions Pannel______________'''

def display_instruction(screen):
    screen.fill(WHITE)
    myfont = pygame.font.SysFont(pygame.font.get_fonts()[0], 32)
    
    title = myfont.render("INSTRUCTIONS :" , 1, pygame.Color('black'))
    screen.blit(title, (screen_center_x - 100, screen_center_y - 300))
    
    line1 = myfont.render("1. Read carefully the instructions." , 1, pygame.Color('black'))
    screen.blit(line1, (screen_center_x - 480, screen_center_y - 100))
    
    line2 = myfont.render("2. When the fixation cross appears keep your eyes on it." , 1, pygame.Color('black'))
    screen.blit(line2, (screen_center_x - 480, screen_center_y - 50))
    
    line3 = myfont.render("3. A pannel with numbers will appears, press SPACEBAR as soon as you see a 5. " , 1, pygame.Color('black'))
    screen.blit(line3, (screen_center_x - 480, screen_center_y))
    
    line4 = myfont.render("4. Sometimes there are pannels without 5 ! (so don't touch anything) " , 1, pygame.Color('black'))
    screen.blit(line4, (screen_center_x - 480, screen_center_y + 50))
    
    line5 = myfont.render("5. Press SPACEBAR to begin." , 1, pygame.Color('black'))
    screen.blit(line5, (screen_center_x - 480, screen_center_y + 100))
  
    pygame.display.flip()

'''______________Stimulus Parameters______________'''

def draw_fixation_cross(x = screen_center_x, y = screen_center_y, length=20, width=5, color=pygame.Color('black')):
    screen.fill(WHITE)
    pygame.draw.line(screen, color, (x, y - length), (x, y + length), width)
    pygame.draw.line(screen, color, (x - length, y), (x + length, y), width)


def display_stimulus(screen, current_trial):
    screen.fill(WHITE)
    myfont = pygame.font.SysFont(pygame.font.get_fonts()[0], 32)
    
    for i in range(50):
        two_rand = myfont.render("2" , 1, pygame.Color('black'))
        screen.blit(two_rand, (screen_center_x + np.random.randint(-400, 400), screen_center_y + np.random.randint(-300, 300)))

    if list_five_apparition[current_trial] == True:     
        five_rand = myfont.render("5" , 1, pygame.Color('black'))
        screen.blit(five_rand, (screen_center_x + np.random.randint(-400, 400), screen_center_y + np.random.randint(-300, 300)))    
      
        pygame.display.flip()
    
    
def five_apparition(nb_of_trial, nb_of_five):
    list_True_or_False = [True for i in range(nb_of_five)]
    list_True_or_False.extend([False for i in range(nb_of_trials - nb_of_five)])
    np.random.shuffle(list_True_or_False)
    
    return(list_True_or_False)

'''______________Data Collection______________'''

def measure_response_time_if_five_present(max_response_delay=max_response_time):
    
    button_pressed = False
    escape = False
    response_delay_elapsed = False
    reaction_time = 0
    pygame.event.clear() 
    t0 = pygame.time.get_ticks()
    
    while not button_pressed and not escape and not response_delay_elapsed:
        
        for ev in pygame.event.get():
            
            if ev.type == pygame.KEYDOWN and ev.key == pygame.K_ESCAPE:
                escape = True
                break
            if ev.type == pygame.QUIT:
                escape = True
                break
            if ev.type == pygame.MOUSEBUTTONDOWN or ev.type == pygame.KEYDOWN:
                reaction_time = pygame.time.get_ticks() - t0
                button_pressed = True

        if pygame.time.get_ticks() - t0 > max_response_delay:
            response_delay_elapsed = True

    if escape:
        return None
    if button_pressed == True:
   
        return reaction_time
    else:
        return max_response_delay

    
def if_no_five(max_response_delay=max_response_time):
    
    button_pressed = False
    escape = False
    response_delay_elapsed = False
    pygame.event.clear() 
    t0 = pygame.time.get_ticks()
    
    while not button_pressed and not escape and not response_delay_elapsed:
        for ev in pygame.event.get():
            if ev.type == pygame.KEYDOWN and ev.key == pygame.K_ESCAPE:
                escape = True
                break
            if ev.type == pygame.QUIT:
                escape = True
                break
            if ev.type == pygame.MOUSEBUTTONDOWN or ev.type == pygame.KEYDOWN:
                button_pressed = True

        if pygame.time.get_ticks() - t0 > max_response_delay:
            response_delay_elapsed = True
    
'''______________Running Loop______________'''

current_trial = -1
list_of_reaction_times = []
list_five_apparition = five_apparition(nb_of_trials, nb_of_pannels_with_five)

space_bar_pressed = False
running = True

display_instruction(screen)

while running:
        
    if space_bar_pressed:
        
        current_trial += 1
        
        screen.fill(WHITE)
        pygame.display.flip()
        pygame.time.wait(1500)
        
        draw_fixation_cross()
        pygame.display.flip()
        pygame.time.wait(np.random.randint(700, 3000))
        
        display_stimulus(screen, current_trial)
        pygame.display.flip()
        
        if list_five_apparition[current_trial] == True:
            list_of_reaction_times += [measure_response_time_if_five_present()]
            
        else:
           if_no_five()
                
        space_bar_pressed = False 
        
              
    for event in pygame.event.get():
          
      if event.type == pygame.QUIT: 
        running = False
        
    if event.type == pygame.KEYDOWN: 
        if event.key == pygame.K_SPACE:
           space_bar_pressed = True 
           
    if current_trial >= nb_of_trials - 1:
        running = False
       
print(list_of_reaction_times)
    
print("Mean Response Time = " + str(np.mean(list_of_reaction_times)))
print("Standard Deviation = " + str(np.std(list_of_reaction_times)))

pygame.quit()
