import pygame
import numpy as np
import os
pygame.init()


'''______________Graphic Window______________'''

# Size of the graphic window
W, H = 1000, 800

# Center Positions
screen_center_x = W // 2
screen_center_y = H // 2

# Color
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (127, 127, 127)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

screen = pygame.display.set_mode((W, H))

pygame.display.set_caption('Numeric Synesthesia')

'''______________Instructions Pannel______________'''

def display_instruction(screen):
    screen.fill(WHITE)
    myfont = pygame.font.SysFont(pygame.font.get_fonts()[0], 32)
    
    title = myfont.render("INSTRUCTIONS :" , 1, pygame.Color('black'))
    screen.blit(title, (screen_center_x - 100, screen_center_y - 300))
    
    line1 = myfont.render("1. Read carefully the instructions." , 1, pygame.Color('black'))
    screen.blit(line1, (screen_center_x - 495, screen_center_y - 200))
    
    line2 = myfont.render("2. When the fixation cross appears keep your eyes on it." , 1, pygame.Color('black'))
    screen.blit(line2, (screen_center_x - 495, screen_center_y - 150))
    
    line3 = myfont.render("3. A pannel with numbers will appears, press SPACEBAR as soon as you see a 2. " , 1, pygame.Color('black'))
    screen.blit(line3, (screen_center_x - 495, screen_center_y - 100))
    
    line4 = myfont.render("4. Repeat for all the trials." , 1, pygame.Color('black'))
    screen.blit(line4, (screen_center_x - 495, screen_center_y - 50))
    
    line5 = myfont.render("5. Press SPACEBAR to beggin." , 1, pygame.Color('black'))
    screen.blit(line5, (screen_center_x - 495, screen_center_y - 0))
  
    pygame.display.flip()


'''______________Stimulus Parameters______________'''

def draw_fixation_cross(x = screen_center_x, y = screen_center_y, length=20, width=5, color=pygame.Color('black')):
    
    screen.fill(WHITE)
    pygame.draw.line(screen, color, (x, y - length), (x, y + length), width)
    pygame.draw.line(screen, color, (x - length, y), (x + length, y), width)


def pannel(center_x = screen_center_x, center_y = screen_center_y, width = 200, height = 200):
    
    screen.fill(WHITE)
    left_x = center_x - width // 2  # x coordinates of topleft corner
    top_y = center_y - height // 2  # y coordinate of topleft corner
    pygame.draw.rect(screen, BLUE, (left_x, top_y, width, height))
     
    
'''______________Reaction Time Measure______________'''
    

def measure_response_time(max_response_delay=5000):
    button_pressed = False
    escape = False
    response_delay_elapsed = False
    reaction_time = 0
    pygame.event.clear() 
    t0 = pygame.time.get_ticks()

    while not button_pressed and not escape and not response_delay_elapsed:
        for ev in pygame.event.get():
            if ev.type == pygame.KEYDOWN and ev.key == pygame.K_ESCAPE:
                escape = True
                break
            if ev.type == pygame.QUIT:
                escape = True
                break
            if ev.type == pygame.MOUSEBUTTONDOWN or ev.type == pygame.KEYDOWN:
                reaction_time = pygame.time.get_ticks() - t0
                button_pressed = True

        if pygame.time.get_ticks() - t0 > max_response_delay:
            response_delay_elapsed = True

    if escape:
        return None
    else:
        return reaction_time

'''______________Running Loop______________'''


nb_of_trials = 3

current_trials = 0
list_of_reaction_times = []
space_bar_pressed = False
running = True


display_instruction(screen)

while running:
        
    if space_bar_pressed:
        
        current_trials += 1
        
        screen.fill(WHITE)
        pygame.display.flip()
        pygame.time.wait(1500)
        
        # Fixation Cross
        draw_fixation_cross()
        pygame.display.flip()
        pygame.time.wait(np.random.randint(1000, 4000))
        
        # Stimulus Display
        pannel()
        pygame.display.flip()
       
        list_of_reaction_times += [measure_response_time()]
        
        # Reset
        space_bar_pressed = False 
              
    for event in pygame.event.get():
        
      # Click to close  
      if event.type == pygame.QUIT: 
        running = False
        
    # Get if space bar pressed    
    if event.type == pygame.KEYDOWN: 
        if event.key == pygame.K_SPACE:
           space_bar_pressed = True 
           
    # End of the session     
    if current_trials >= nb_of_trials:
        running = False
        print(list_of_reaction_times)
    
print("Mean Response Time = " + str(np.mean(list_of_reaction_times)))
print("Standard Deviation = " + str(np.std(list_of_reaction_times)))



pygame.quit()
